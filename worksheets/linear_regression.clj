;; gorilla-repl.fileformat = 1

;; **
;;; # Bayesian Linear Regression
;; **

;; @@
(ns linear-regression
  (:require [gorilla-plot.core :as plot]
            [clojure.core.matrix :as mat])
  (:use clojure.repl
        clojure.pprint
        [anglican core runtime emit stat]))
;; @@
;; =>
;;; {"type":"html","content":"<span class='clj-nil'>nil</span>","value":"nil"}
;; <=

;; **
;;; Some functions we'll need:
;; **

;; @@
(defdist dirac [x]
  (sample* [this] x)
  (observe* [this value]
            (if (= value x)
              0
              (- (/ 1.0 0.0)))))

(defn plot-distribution

  ([samples]
   (plot-distribution samples (fn [x] x)))

  ([samples choice & options]
   (let [empirical-dist (empirical-distribution (collect-results samples)) ;; combines redundant entries, exponentiates log-weights, and normalizes
         N 1000 ;; this is the # of samples from the distribution we're actually going to plot
         sampler (categorical empirical-dist)
         chosen-samples (repeatedly N #(choice (sample* sampler)))]
     (apply plot/histogram 
            (concat (list chosen-samples :normalize :probability) options)))))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-unkown'>#multifn[print-method 0x2d8b49c1]</span>","value":"#multifn[print-method 0x2d8b49c1]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/plot-distribution</span>","value":"#'linear-regression/plot-distribution"}],"value":"[#multifn[print-method 0x2d8b49c1],#'linear-regression/plot-distribution]"}
;; <=

;; **
;;; "Linear regression" most commonly refers to the following model:
;;; 
;;; $$ p(Y|X, w, \sigma) = \prod\_{(x, y) \in D} p(y | x, w, \sigma) $$
;;; $$ p(y|x, w, \sigma) = N(y | w^T x, \sigma) $$
;;; 
;;; Here, @@ D @@ is a dataset consisting of pairs @@(x, y) \in D@@, @@x \in \mathbb{R}^M@@ is a multidimensional independent variable, and @@y \in \mathbb{R}@@ is a one-dimensional dependent variable. We assume that the dependent variable is linearly dependent on the values of the independent variable, with a set of weights @@w \in \mathbb{R}^M@@. Given the value of the independent variable @@x@@, we assume that there is Gaussian noise with variance @@\sigma^2@@ on the outputs @@y@@. We are interested in calculating the weights @@w@@ and variance @@\sigma^2@@ that best explain the dataset @@D@@, so that we can make forward predictions @@\hat{y}(x)@@ for values @@(x, y)@@ not contained within the dataset.
;;; 
;;; If we know absolutely nothing about what the weights @@w@@ and noise @@\sigma@@ are likely to be, we can fit this model using linear least-squares. Doing so, we compute estimates @@\hat{w}@@ and @@\hat{\sigma}@@ of the weights and noise parameters that best describe our observed dataset. Having computed these values, we can compute estimates @@\hat{y}(x) = \hat{w}^T x@@ for inputs @@x@@ that are outside of the dataset. Better yet, for inputs @@x@@ outside of the dataset, we can summarize our state of knowledge - quantify our uncertainty about our predictions - using the following distribution:
;;; 
;;; $$ y | x \sim N(\hat{w}^T x, \hat{\sigma}) $$
;;; 
;;; The linear least-squares solution, by the way, is as follows:
;;; 
;;; $$ \hat{w} = (X^T X)^{-1} X^T y $$
;;; $$ \hat{\sigma} = \frac{1}{N} \sqrt{\sum\_{n=1}^{N} (y\_n - \hat{y}(x\_n))^2} $$
;;; 
;;; Here, @@X@@ is a design matrix consisting of our input variables @@x\_n@@, @@N@@ is the size of the dataset @@D@@, and @@\hat{y}(x\_n) = \hat{w}^T x\_n@@ are the predictions for each input in the dataset.
;; **

;; **
;;; However, one significant problem with this approach in practice is that it essentially assumes that the dataset @@D@@ is large, and that the experimenter has zero prior knowledge about likely values of the weights @@w@@ and the noise @@\sigma@@. Think about it this way: while we have quantified our uncertainty about @@y@@ given @@x@@, our predictions, using the above normal distribution, we have not quantified our uncertainty about the true values @@w@@ and @@\sigma@@. We have implicitly assumed that there *is* no uncertainty about the true values of @@w@@ and @@\sigma@@: that the values we calculated above using least-squares are precisely and exactly correct.
;;; 
;;; In many common situations, the dataset @@D@@ is not so large that prior intuitions about @@w@@ and @@\sigma@@ cease to matter competely. The dataset is small enough that it is unreasonable to assume that we have the "true" values of @@w@@ and @@\sigma@@: instead, we assume that we have access only to a probability distribution over the values of our parameters. For this reason, we often turn to **Bayesian linear regression**.
;; **

;; **
;;; Bayesian linear regression refers to a class of models in which we assume prior knowledge about the weights @@w@@ and noise @@\sigma@@, in the form of **prior distributions**:
;;; 
;;; $$ w \sim p(w) $$
;;; $$ \sigma \sim p(\sigma) $$
;;; 
;;; Using a dataset @@D@@, we then calculate the **posterior distributions** of weights and noise, given the dataset @@D@@, using Bayes' rule:
;;; 
;;; $$ p(w, \sigma|Y, X) = \frac{p(Y|X, w, \sigma)p(w)p(\sigma)}{p(Y|X)} = \frac{p(w)p(\sigma)\prod\_{(x, y) \in D} N(y | w^{T} x, \sigma)}{\int\_{w} \int\_{\sigma} p(w)p(\sigma)\prod\_{(x, y) \in D} N(y | w^{T} x, \sigma)} $$
;;; 
;;; Clearly, this expression looks complex, and looks hard to compute. Worse still, this posterior distribution isn't what we care about directly: what we really care about is using this posterior distribution @@p(w, \sigma|Y, X)@@ to properly describe our state of uncertainty about the forward predictions @@p(y|x, X, Y)@@ of the model - about inputs @@x@@ that we haven't seen yet. This **predictive distribution** is related to the posterior distribution as follows:
;;; 
;;; $$ p(y|x, X, Y) = \int\_{w} \int\_{\sigma} p(y|x, w, \sigma) p(w, \sigma|Y, X) = \int\_{w} \int\_{\sigma} N(y|w^T x, \sigma) p(w, \sigma|Y, X) $$
;;; 
;;; So to sum up: Bayesian linear regression differs from standard linear regression in that it assumes that the modeller has prior information about the weights @@w@@ and noise level @@\sigma@@, which is summarized in the prior distributions @@p(w)@@ and @@p(\sigma)@@. If the modeller quantifies their prior uncertainty, then they can automatically quantify their post-data, "posterior" uncertainty using the posterior distribution @@ p(w, \sigma | X, Y) @@, rather than essentially assuming that their estimates @@\hat{w}, \hat{\sigma}@@ are exactly correct. They can then propagate this uncertainty forward, using it to quantify their uncertainty about the model's predictions, using the predictive distribution @@p(y|x, X, Y)@@. However, computing - and even approximating - these quantities is very challenging. Firstly because of the mathematical challenge of the above integrals, but secondly because, when we allow the modeller to have a completely arbitrary prior @@p(w)@@ and a completely arbitrary likelihood @@p(D|w)@@, we must consider the possibility that the posterior distribution @@p(w|D)@@ is highly non-Gaussian - in the sense that it may be skewed, heavy-tailed, multimodal, or even possibly not smooth.
;; **

;; **
;;; Enter probabilistic programming. The following Anglican query is a simple implementation of Bayesian linear regression with respect to the priors `weights-prior` and `sigma-prior`:
;; **

;; @@
(def weights-prior (normal 0 1))
(def sigma-prior (exponential 1))


(defquery linear-regression [data x]
  (let [N (count data)
        [x0 y0] (first data)
        dimX (count x0)
        
        
        
        weights (repeatedly dimX #(sample weights-prior)) ;; sample a set of weights from the prior
        sigma (sample sigma-prior) ;; sample a noise level from the prior
        
        ;; having defined these, for a particular data point x, 
        ;; the predictive distribution of linear regression is:
        predictive (fn [x] (normal (reduce + (map * weights x)) sigma))]
    
    (loop [n 0]
      (if (< n N)
        (let [[xn yn] (nth data n)]
          (observe (predictive xn) yn)
          (recur (+ n 1)))))
    
    ;; then, return the weights for inspection, and the predictive distribution for use:
    {:weights weights
     :sigma sigma
     :predictor (predictive x)}))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/weights-prior</span>","value":"#'linear-regression/weights-prior"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/sigma-prior</span>","value":"#'linear-regression/sigma-prior"}],"value":"[#'linear-regression/weights-prior,#'linear-regression/sigma-prior]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/linear-regression</span>","value":"#'linear-regression/linear-regression"}],"value":"[[#'linear-regression/weights-prior,#'linear-regression/sigma-prior],#'linear-regression/linear-regression]"}
;; <=

;; **
;;; We have assumed that each of the weights is drawn from an independent normal distribution with standard deviation 1, and that the noise level is drawn from an exponential distribution with parameter 1. This is our state of prior knowledge, before we've seen any data.
;;; 
;;; So next, let's construct a possible dataset, by choosing a set of "true" weights, some input values, and calculating the resulting output values:
;; **

;; @@
(def xs [[1 1 3] [3 3 9] [5 5 2] [1 7 3] [2 3 6] [5 6 10]])
(def w1 1.5)
(def w2 -0.5)
(def w3 1)
(def true-f (fn [[x1 x2 x3]] (+ (* w1 x1) (* w2 x2) (* w3 x3))))
(def ys (mapv true-f xs))
xs
ys

(def dataset (map (fn [x y] [x y]) xs ys))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/xs</span>","value":"#'linear-regression/xs"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/w1</span>","value":"#'linear-regression/w1"}],"value":"[#'linear-regression/xs,#'linear-regression/w1]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/w2</span>","value":"#'linear-regression/w2"}],"value":"[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/w3</span>","value":"#'linear-regression/w3"}],"value":"[[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2],#'linear-regression/w3]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/true-f</span>","value":"#'linear-regression/true-f"}],"value":"[[[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2],#'linear-regression/w3],#'linear-regression/true-f]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/ys</span>","value":"#'linear-regression/ys"}],"value":"[[[[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2],#'linear-regression/w3],#'linear-regression/true-f],#'linear-regression/ys]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"}],"value":"[1 1 3]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-long'>9</span>","value":"9"}],"value":"[3 3 9]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>5</span>","value":"5"},{"type":"html","content":"<span class='clj-long'>5</span>","value":"5"},{"type":"html","content":"<span class='clj-long'>2</span>","value":"2"}],"value":"[5 5 2]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>1</span>","value":"1"},{"type":"html","content":"<span class='clj-long'>7</span>","value":"7"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"}],"value":"[1 7 3]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>2</span>","value":"2"},{"type":"html","content":"<span class='clj-long'>3</span>","value":"3"},{"type":"html","content":"<span class='clj-long'>6</span>","value":"6"}],"value":"[2 3 6]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>5</span>","value":"5"},{"type":"html","content":"<span class='clj-long'>6</span>","value":"6"},{"type":"html","content":"<span class='clj-long'>10</span>","value":"10"}],"value":"[5 6 10]"}],"value":"[[1 1 3] [3 3 9] [5 5 2] [1 7 3] [2 3 6] [5 6 10]]"}],"value":"[[[[[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2],#'linear-regression/w3],#'linear-regression/true-f],#'linear-regression/ys],[[1 1 3] [3 3 9] [5 5 2] [1 7 3] [2 3 6] [5 6 10]]]"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-double'>4.0</span>","value":"4.0"},{"type":"html","content":"<span class='clj-double'>12.0</span>","value":"12.0"},{"type":"html","content":"<span class='clj-double'>7.0</span>","value":"7.0"},{"type":"html","content":"<span class='clj-double'>1.0</span>","value":"1.0"},{"type":"html","content":"<span class='clj-double'>7.5</span>","value":"7.5"},{"type":"html","content":"<span class='clj-double'>14.5</span>","value":"14.5"}],"value":"[4.0 12.0 7.0 1.0 7.5 14.5]"}],"value":"[[[[[[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2],#'linear-regression/w3],#'linear-regression/true-f],#'linear-regression/ys],[[1 1 3] [3 3 9] [5 5 2] [1 7 3] [2 3 6] [5 6 10]]],[4.0 12.0 7.0 1.0 7.5 14.5]]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/dataset</span>","value":"#'linear-regression/dataset"}],"value":"[[[[[[[[#'linear-regression/xs,#'linear-regression/w1],#'linear-regression/w2],#'linear-regression/w3],#'linear-regression/true-f],#'linear-regression/ys],[[1 1 3] [3 3 9] [5 5 2] [1 7 3] [2 3 6] [5 6 10]]],[4.0 12.0 7.0 1.0 7.5 14.5]],#'linear-regression/dataset]"}
;; <=

;; **
;;; Our goal is to estimate the value of the function `true-f` at the point @@x@@ below. We know that its true value is the following:
;; **

;; @@
(def x [4 4 4])
x
(true-f x)
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/x</span>","value":"#'linear-regression/x"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"},{"type":"html","content":"<span class='clj-long'>4</span>","value":"4"}],"value":"[4 4 4]"}],"value":"[#'linear-regression/x,[4 4 4]]"},{"type":"html","content":"<span class='clj-double'>8.0</span>","value":"8.0"}],"value":"[[#'linear-regression/x,[4 4 4]],8.0]"}
;; <=

;; **
;;; To compute the posterior distributions over weights, as well as to compute the predictive distribution evaluated at @@x@@, we call one of Anglican's inference algorithms, and take 20,000 approximate samples from the posterior:
;; **

;; @@
(def S 10000)
(def warmup 150000)

(def samples 
  (take S (drop warmup 
                (doquery :ipmcmc linear-regression [dataset x] 
                         :number-of-particles 100 :number-of-nodes 100))))

(take-last 1 samples)
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/S</span>","value":"#'linear-regression/S"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/warmup</span>","value":"#'linear-regression/warmup"}],"value":"[#'linear-regression/S,#'linear-regression/warmup]"},{"type":"html","content":"<span class='clj-var'>#&#x27;linear-regression/samples</span>","value":"#'linear-regression/samples"}],"value":"[[#'linear-regression/S,#'linear-regression/warmup],#'linear-regression/samples]"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"list-like","open":"<span class='clj-map'>{</span>","close":"<span class='clj-map'>}</span>","separator":", ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:log-weight</span>","value":":log-weight"},{"type":"html","content":"<span class='clj-double'>-4.688130622308075</span>","value":"-4.688130622308075"}],"value":"[:log-weight -4.688130622308075]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:result</span>","value":":result"},{"type":"list-like","open":"<span class='clj-map'>{</span>","close":"<span class='clj-map'>}</span>","separator":", ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:sigma</span>","value":":sigma"},{"type":"html","content":"<span class='clj-double'>0.39153617480188085</span>","value":"0.39153617480188085"}],"value":"[:sigma 0.39153617480188085]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:weights</span>","value":":weights"},{"type":"list-like","open":"<span class='clj-list'>(</span>","close":"<span class='clj-list'>)</span>","separator":" ","items":[{"type":"html","content":"<span class='clj-double'>1.3242235763279309</span>","value":"1.3242235763279309"},{"type":"html","content":"<span class='clj-double'>-0.4562699912945355</span>","value":"-0.4562699912945355"},{"type":"html","content":"<span class='clj-double'>0.9865133864858637</span>","value":"0.9865133864858637"}],"value":"(1.3242235763279309 -0.4562699912945355 0.9865133864858637)"}],"value":"[:weights (1.3242235763279309 -0.4562699912945355 0.9865133864858637)]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:predictor</span>","value":":predictor"},{"type":"list-like","open":"<span class='clj-record'>#anglican.runtime.normal-distribution{</span>","close":"<span class='clj-record'>}</span>","separator":" ","items":[{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:mean</span>","value":":mean"},{"type":"html","content":"<span class='clj-double'>7.417867886077037</span>","value":"7.417867886077037"}],"value":"[:mean 7.417867886077037]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:sd</span>","value":":sd"},{"type":"html","content":"<span class='clj-double'>0.39153617480188085</span>","value":"0.39153617480188085"}],"value":"[:sd 0.39153617480188085]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:dist25391</span>","value":":dist25391"},{"type":"html","content":"<span class='clj-unkown'>#object[org.apache.commons.math3.distribution.NormalDistribution 0x73a2b461 &quot;org.apache.commons.math3.distribution.NormalDistribution@73a2b461&quot;]</span>","value":"#object[org.apache.commons.math3.distribution.NormalDistribution 0x73a2b461 \"org.apache.commons.math3.distribution.NormalDistribution@73a2b461\"]"}],"value":"[:dist25391 #object[org.apache.commons.math3.distribution.NormalDistribution 0x73a2b461 \"org.apache.commons.math3.distribution.NormalDistribution@73a2b461\"]]"}],"value":"(anglican.runtime/normal 7.417867886077037 0.39153617480188085)"}],"value":"[:predictor (anglican.runtime/normal 7.417867886077037 0.39153617480188085)]"}],"value":"{:sigma 0.39153617480188085, :weights (1.3242235763279309 -0.4562699912945355 0.9865133864858637), :predictor (anglican.runtime/normal 7.417867886077037 0.39153617480188085)}"}],"value":"[:result {:sigma 0.39153617480188085, :weights (1.3242235763279309 -0.4562699912945355 0.9865133864858637), :predictor (anglican.runtime/normal 7.417867886077037 0.39153617480188085)}]"},{"type":"list-like","open":"","close":"","separator":" ","items":[{"type":"html","content":"<span class='clj-keyword'>:predicts</span>","value":":predicts"},{"type":"list-like","open":"<span class='clj-vector'>[</span>","close":"<span class='clj-vector'>]</span>","separator":" ","items":[],"value":"[]"}],"value":"[:predicts []]"}],"value":"{:log-weight -4.688130622308075, :result {:sigma 0.39153617480188085, :weights (1.3242235763279309 -0.4562699912945355 0.9865133864858637), :predictor (anglican.runtime/normal 7.417867886077037 0.39153617480188085)}, :predicts []}"}],"value":"({:log-weight -4.688130622308075, :result {:sigma 0.39153617480188085, :weights (1.3242235763279309 -0.4562699912945355 0.9865133864858637), :predictor (anglican.runtime/normal 7.417867886077037 0.39153617480188085)}, :predicts []})"}],"value":"[[[#'linear-regression/S,#'linear-regression/warmup],#'linear-regression/samples],({:log-weight -4.688130622308075, :result {:sigma 0.39153617480188085, :weights (1.3242235763279309 -0.4562699912945355 0.9865133864858637), :predictor (anglican.runtime/normal 7.417867886077037 0.39153617480188085)}, :predicts []})]"}
;; <=

;; **
;;; By running inference, we have generated the following approximations of the posterior distributions of the weights given data:
;; **

;; @@
"Weight 1:"
(plot-distribution samples #(first (:weights %)))

"Weight 2:"
(plot-distribution samples #(second (:weights %)))

"Weight 3:"
(plot-distribution samples #(nth (:weights %) 2))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-string'>&quot;Weight 1:&quot;</span>","value":"\"Weight 1:\""},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"8964f15c-49f8-45de-bc2c-baa020955d46","values":[{"x":-1.0764531917727602,"y":0},{"x":-0.7941374993402073,"y":0.001},{"x":-0.5118218069076543,"y":0},{"x":-0.22950611447510139,"y":0},{"x":0.05280957795745156,"y":0},{"x":0.3351252703900045,"y":0},{"x":0.6174409628225574,"y":0.002},{"x":0.8997566552551104,"y":0.056},{"x":1.1820723476876633,"y":0.239},{"x":1.4643880401202163,"y":0.349},{"x":1.7467037325527692,"y":0.298},{"x":2.0290194249853224,"y":0.055},{"x":2.311335117417875,"y":0}]}],"marks":[{"type":"line","from":{"data":"8964f15c-49f8-45de-bc2c-baa020955d46"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"8964f15c-49f8-45de-bc2c-baa020955d46","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"8964f15c-49f8-45de-bc2c-baa020955d46","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"8964f15c-49f8-45de-bc2c-baa020955d46\", :values ({:x -1.0764531917727602, :y 0} {:x -0.7941374993402073, :y 0.001} {:x -0.5118218069076543, :y 0.0} {:x -0.22950611447510139, :y 0.0} {:x 0.05280957795745156, :y 0.0} {:x 0.3351252703900045, :y 0.0} {:x 0.6174409628225574, :y 0.002} {:x 0.8997566552551104, :y 0.056} {:x 1.1820723476876633, :y 0.239} {:x 1.4643880401202163, :y 0.349} {:x 1.7467037325527692, :y 0.298} {:x 2.0290194249853224, :y 0.055} {:x 2.311335117417875, :y 0})}], :marks [{:type \"line\", :from {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[\"Weight 1:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"8964f15c-49f8-45de-bc2c-baa020955d46\", :values ({:x -1.0764531917727602, :y 0} {:x -0.7941374993402073, :y 0.001} {:x -0.5118218069076543, :y 0.0} {:x -0.22950611447510139, :y 0.0} {:x 0.05280957795745156, :y 0.0} {:x 0.3351252703900045, :y 0.0} {:x 0.6174409628225574, :y 0.002} {:x 0.8997566552551104, :y 0.056} {:x 1.1820723476876633, :y 0.239} {:x 1.4643880401202163, :y 0.349} {:x 1.7467037325527692, :y 0.298} {:x 2.0290194249853224, :y 0.055} {:x 2.311335117417875, :y 0})}], :marks [{:type \"line\", :from {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"},{"type":"html","content":"<span class='clj-string'>&quot;Weight 2:&quot;</span>","value":"\"Weight 2:\""}],"value":"[[\"Weight 1:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"8964f15c-49f8-45de-bc2c-baa020955d46\", :values ({:x -1.0764531917727602, :y 0} {:x -0.7941374993402073, :y 0.001} {:x -0.5118218069076543, :y 0.0} {:x -0.22950611447510139, :y 0.0} {:x 0.05280957795745156, :y 0.0} {:x 0.3351252703900045, :y 0.0} {:x 0.6174409628225574, :y 0.002} {:x 0.8997566552551104, :y 0.056} {:x 1.1820723476876633, :y 0.239} {:x 1.4643880401202163, :y 0.349} {:x 1.7467037325527692, :y 0.298} {:x 2.0290194249853224, :y 0.055} {:x 2.311335117417875, :y 0})}], :marks [{:type \"line\", :from {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}],\"Weight 2:\"]"},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"4c2a769a-6366-457d-ab44-76937a78ee95","values":[{"x":-1.2923791983705573,"y":0},{"x":-1.1358760440565159,"y":0.002},{"x":-0.9793728897424744,"y":0},{"x":-0.8228697354284329,"y":0.016},{"x":-0.6663665811143914,"y":0.046},{"x":-0.5098634268003499,"y":0.213},{"x":-0.3533602724863084,"y":0.447},{"x":-0.19685711817226692,"y":0.216},{"x":-0.04035396385822543,"y":0.045},{"x":0.11614919045581606,"y":0.012},{"x":0.27265234476985756,"y":0.002},{"x":0.42915549908389905,"y":0},{"x":0.5856586533979405,"y":0.001},{"x":0.742161807711982,"y":0}]}],"marks":[{"type":"line","from":{"data":"4c2a769a-6366-457d-ab44-76937a78ee95"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"4c2a769a-6366-457d-ab44-76937a78ee95","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"4c2a769a-6366-457d-ab44-76937a78ee95","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"4c2a769a-6366-457d-ab44-76937a78ee95\", :values ({:x -1.2923791983705573, :y 0} {:x -1.1358760440565159, :y 0.002} {:x -0.9793728897424744, :y 0.0} {:x -0.8228697354284329, :y 0.016} {:x -0.6663665811143914, :y 0.046} {:x -0.5098634268003499, :y 0.213} {:x -0.3533602724863084, :y 0.447} {:x -0.19685711817226692, :y 0.216} {:x -0.04035396385822543, :y 0.045} {:x 0.11614919045581606, :y 0.012} {:x 0.27265234476985756, :y 0.002} {:x 0.42915549908389905, :y 0.0} {:x 0.5856586533979405, :y 0.001} {:x 0.742161807711982, :y 0})}], :marks [{:type \"line\", :from {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[[[\"Weight 1:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"8964f15c-49f8-45de-bc2c-baa020955d46\", :values ({:x -1.0764531917727602, :y 0} {:x -0.7941374993402073, :y 0.001} {:x -0.5118218069076543, :y 0.0} {:x -0.22950611447510139, :y 0.0} {:x 0.05280957795745156, :y 0.0} {:x 0.3351252703900045, :y 0.0} {:x 0.6174409628225574, :y 0.002} {:x 0.8997566552551104, :y 0.056} {:x 1.1820723476876633, :y 0.239} {:x 1.4643880401202163, :y 0.349} {:x 1.7467037325527692, :y 0.298} {:x 2.0290194249853224, :y 0.055} {:x 2.311335117417875, :y 0})}], :marks [{:type \"line\", :from {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}],\"Weight 2:\"],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"4c2a769a-6366-457d-ab44-76937a78ee95\", :values ({:x -1.2923791983705573, :y 0} {:x -1.1358760440565159, :y 0.002} {:x -0.9793728897424744, :y 0.0} {:x -0.8228697354284329, :y 0.016} {:x -0.6663665811143914, :y 0.046} {:x -0.5098634268003499, :y 0.213} {:x -0.3533602724863084, :y 0.447} {:x -0.19685711817226692, :y 0.216} {:x -0.04035396385822543, :y 0.045} {:x 0.11614919045581606, :y 0.012} {:x 0.27265234476985756, :y 0.002} {:x 0.42915549908389905, :y 0.0} {:x 0.5856586533979405, :y 0.001} {:x 0.742161807711982, :y 0})}], :marks [{:type \"line\", :from {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"},{"type":"html","content":"<span class='clj-string'>&quot;Weight 3:&quot;</span>","value":"\"Weight 3:\""}],"value":"[[[[\"Weight 1:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"8964f15c-49f8-45de-bc2c-baa020955d46\", :values ({:x -1.0764531917727602, :y 0} {:x -0.7941374993402073, :y 0.001} {:x -0.5118218069076543, :y 0.0} {:x -0.22950611447510139, :y 0.0} {:x 0.05280957795745156, :y 0.0} {:x 0.3351252703900045, :y 0.0} {:x 0.6174409628225574, :y 0.002} {:x 0.8997566552551104, :y 0.056} {:x 1.1820723476876633, :y 0.239} {:x 1.4643880401202163, :y 0.349} {:x 1.7467037325527692, :y 0.298} {:x 2.0290194249853224, :y 0.055} {:x 2.311335117417875, :y 0})}], :marks [{:type \"line\", :from {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}],\"Weight 2:\"],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"4c2a769a-6366-457d-ab44-76937a78ee95\", :values ({:x -1.2923791983705573, :y 0} {:x -1.1358760440565159, :y 0.002} {:x -0.9793728897424744, :y 0.0} {:x -0.8228697354284329, :y 0.016} {:x -0.6663665811143914, :y 0.046} {:x -0.5098634268003499, :y 0.213} {:x -0.3533602724863084, :y 0.447} {:x -0.19685711817226692, :y 0.216} {:x -0.04035396385822543, :y 0.045} {:x 0.11614919045581606, :y 0.012} {:x 0.27265234476985756, :y 0.002} {:x 0.42915549908389905, :y 0.0} {:x 0.5856586533979405, :y 0.001} {:x 0.742161807711982, :y 0})}], :marks [{:type \"line\", :from {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}],\"Weight 3:\"]"},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"75fc5889-7c8f-4020-9f00-57c8c4b2121e","values":[{"x":0.5172766595825146,"y":0},{"x":0.5993932146045163,"y":0.001},{"x":0.6815097696265181,"y":0.002},{"x":0.7636263246485199,"y":0.022},{"x":0.8457428796705216,"y":0.105},{"x":0.9278594346925234,"y":0.129},{"x":1.009975989714525,"y":0.169},{"x":1.0920925447365268,"y":0.369},{"x":1.1742090997585286,"y":0.116},{"x":1.2563256547805304,"y":0.077},{"x":1.3384422098025321,"y":0.004},{"x":1.420558764824534,"y":0.006},{"x":1.5026753198465357,"y":0}]}],"marks":[{"type":"line","from":{"data":"75fc5889-7c8f-4020-9f00-57c8c4b2121e"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"75fc5889-7c8f-4020-9f00-57c8c4b2121e","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"75fc5889-7c8f-4020-9f00-57c8c4b2121e","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\", :values ({:x 0.5172766595825146, :y 0} {:x 0.5993932146045163, :y 0.001} {:x 0.6815097696265181, :y 0.002} {:x 0.7636263246485199, :y 0.022} {:x 0.8457428796705216, :y 0.105} {:x 0.9278594346925234, :y 0.129} {:x 1.009975989714525, :y 0.169} {:x 1.0920925447365268, :y 0.369} {:x 1.1742090997585286, :y 0.116} {:x 1.2563256547805304, :y 0.077} {:x 1.3384422098025321, :y 0.004} {:x 1.420558764824534, :y 0.006} {:x 1.5026753198465357, :y 0})}], :marks [{:type \"line\", :from {:data \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[[[[[\"Weight 1:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"8964f15c-49f8-45de-bc2c-baa020955d46\", :values ({:x -1.0764531917727602, :y 0} {:x -0.7941374993402073, :y 0.001} {:x -0.5118218069076543, :y 0.0} {:x -0.22950611447510139, :y 0.0} {:x 0.05280957795745156, :y 0.0} {:x 0.3351252703900045, :y 0.0} {:x 0.6174409628225574, :y 0.002} {:x 0.8997566552551104, :y 0.056} {:x 1.1820723476876633, :y 0.239} {:x 1.4643880401202163, :y 0.349} {:x 1.7467037325527692, :y 0.298} {:x 2.0290194249853224, :y 0.055} {:x 2.311335117417875, :y 0})}], :marks [{:type \"line\", :from {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"8964f15c-49f8-45de-bc2c-baa020955d46\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}],\"Weight 2:\"],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"4c2a769a-6366-457d-ab44-76937a78ee95\", :values ({:x -1.2923791983705573, :y 0} {:x -1.1358760440565159, :y 0.002} {:x -0.9793728897424744, :y 0.0} {:x -0.8228697354284329, :y 0.016} {:x -0.6663665811143914, :y 0.046} {:x -0.5098634268003499, :y 0.213} {:x -0.3533602724863084, :y 0.447} {:x -0.19685711817226692, :y 0.216} {:x -0.04035396385822543, :y 0.045} {:x 0.11614919045581606, :y 0.012} {:x 0.27265234476985756, :y 0.002} {:x 0.42915549908389905, :y 0.0} {:x 0.5856586533979405, :y 0.001} {:x 0.742161807711982, :y 0})}], :marks [{:type \"line\", :from {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"4c2a769a-6366-457d-ab44-76937a78ee95\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}],\"Weight 3:\"],#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\", :values ({:x 0.5172766595825146, :y 0} {:x 0.5993932146045163, :y 0.001} {:x 0.6815097696265181, :y 0.002} {:x 0.7636263246485199, :y 0.022} {:x 0.8457428796705216, :y 0.105} {:x 0.9278594346925234, :y 0.129} {:x 1.009975989714525, :y 0.169} {:x 1.0920925447365268, :y 0.369} {:x 1.1742090997585286, :y 0.116} {:x 1.2563256547805304, :y 0.077} {:x 1.3384422098025321, :y 0.004} {:x 1.420558764824534, :y 0.006} {:x 1.5026753198465357, :y 0})}], :marks [{:type \"line\", :from {:data \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"75fc5889-7c8f-4020-9f00-57c8c4b2121e\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"}
;; <=

;; **
;;; Notice how different these distributions are from their prior distributions, which were simple unit-variance normals @@N(0, 1)@@. They've moved far!
;;; 
;;; We have also generated the following distribution of the noise level @@\sigma@@ given data:
;; **

;; @@
"Sigma:"
(plot-distribution samples :sigma)
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-string'>&quot;Sigma:&quot;</span>","value":"\"Sigma:\""},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"a8a09a11-0d2c-466d-80d3-ec196e19e2ac","values":[{"x":0.15724150018426286,"y":0},{"x":0.5037482968910446,"y":0.184},{"x":0.8502550935978264,"y":0.405},{"x":1.1967618903046082,"y":0.258},{"x":1.5432686870113899,"y":0.115},{"x":1.8897754837181715,"y":0.027},{"x":2.236282280424953,"y":0.004},{"x":2.582789077131735,"y":0.001},{"x":2.9292958738385164,"y":0.003},{"x":3.275802670545298,"y":0},{"x":3.6223094672520797,"y":0.001},{"x":3.9688162639588613,"y":0.001},{"x":4.315323060665643,"y":0.001},{"x":4.6618298573724255,"y":0}]}],"marks":[{"type":"line","from":{"data":"a8a09a11-0d2c-466d-80d3-ec196e19e2ac"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"a8a09a11-0d2c-466d-80d3-ec196e19e2ac","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"a8a09a11-0d2c-466d-80d3-ec196e19e2ac","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\", :values ({:x 0.15724150018426286, :y 0} {:x 0.5037482968910446, :y 0.184} {:x 0.8502550935978264, :y 0.405} {:x 1.1967618903046082, :y 0.258} {:x 1.5432686870113899, :y 0.115} {:x 1.8897754837181715, :y 0.027} {:x 2.236282280424953, :y 0.004} {:x 2.582789077131735, :y 0.001} {:x 2.9292958738385164, :y 0.003} {:x 3.275802670545298, :y 0.0} {:x 3.6223094672520797, :y 0.001} {:x 3.9688162639588613, :y 0.001} {:x 4.315323060665643, :y 0.001} {:x 4.6618298573724255, :y 0})}], :marks [{:type \"line\", :from {:data \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[\"Sigma:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\", :values ({:x 0.15724150018426286, :y 0} {:x 0.5037482968910446, :y 0.184} {:x 0.8502550935978264, :y 0.405} {:x 1.1967618903046082, :y 0.258} {:x 1.5432686870113899, :y 0.115} {:x 1.8897754837181715, :y 0.027} {:x 2.236282280424953, :y 0.004} {:x 2.582789077131735, :y 0.001} {:x 2.9292958738385164, :y 0.003} {:x 3.275802670545298, :y 0.0} {:x 3.6223094672520797, :y 0.001} {:x 3.9688162639588613, :y 0.001} {:x 4.315323060665643, :y 0.001} {:x 4.6618298573724255, :y 0})}], :marks [{:type \"line\", :from {:data \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"a8a09a11-0d2c-466d-80d3-ec196e19e2ac\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"}
;; <=

;; **
;;; However, this appears to be not so different from its prior distribution Exp(1). This roughly tells us that the dataset @@D@@ we input actually does not carry much information that can be used to calculate the noise level @@\sigma@@: most likely, we would need substantially more data points in order to significantly narrow our uncertainty about @@\sigma@@.
;;; 
;;; Finally, using these estimated weights and noise levels, we have generated the following description of our state of uncertainty about @@f(x)@@ at our point of interest @@x@@:
;; **

;; @@
"Predictions:"
(plot-distribution samples #(sample* (:predictor %)))
;; @@
;; =>
;;; {"type":"list-like","open":"","close":"","separator":"</pre><pre>","items":[{"type":"html","content":"<span class='clj-string'>&quot;Predictions:&quot;</span>","value":"\"Predictions:\""},{"type":"vega","content":{"width":400,"height":247.2187957763672,"padding":{"top":10,"left":55,"bottom":40,"right":10},"data":[{"name":"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831","values":[{"x":0.48191460119264695,"y":0},{"x":1.5017151977199725,"y":0.001},{"x":2.521515794247298,"y":0},{"x":3.5413163907746235,"y":0.003},{"x":4.561116987301949,"y":0.006},{"x":5.580917583829274,"y":0.017},{"x":6.6007181803565995,"y":0.094},{"x":7.620518776883925,"y":0.32},{"x":8.64031937341125,"y":0.407},{"x":9.660119969938576,"y":0.12},{"x":10.679920566465901,"y":0.028},{"x":11.699721162993226,"y":0.003},{"x":12.719521759520552,"y":0.001},{"x":13.739322356047877,"y":0}]}],"marks":[{"type":"line","from":{"data":"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831"},"properties":{"enter":{"x":{"scale":"x","field":"data.x"},"y":{"scale":"y","field":"data.y"},"interpolate":{"value":"step-before"},"fill":{"value":"steelblue"},"fillOpacity":{"value":0.4},"stroke":{"value":"steelblue"},"strokeWidth":{"value":2},"strokeOpacity":{"value":1}}}}],"scales":[{"name":"x","type":"linear","range":"width","zero":false,"domain":{"data":"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831","field":"data.x"}},{"name":"y","type":"linear","range":"height","nice":true,"zero":false,"domain":{"data":"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831","field":"data.y"}}],"axes":[{"type":"x","scale":"x"},{"type":"y","scale":"y"}]},"value":"#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\", :values ({:x 0.48191460119264695, :y 0} {:x 1.5017151977199725, :y 0.001} {:x 2.521515794247298, :y 0.0} {:x 3.5413163907746235, :y 0.003} {:x 4.561116987301949, :y 0.006} {:x 5.580917583829274, :y 0.017} {:x 6.6007181803565995, :y 0.094} {:x 7.620518776883925, :y 0.32} {:x 8.64031937341125, :y 0.407} {:x 9.660119969938576, :y 0.12} {:x 10.679920566465901, :y 0.028} {:x 11.699721162993226, :y 0.003} {:x 12.719521759520552, :y 0.001} {:x 13.739322356047877, :y 0})}], :marks [{:type \"line\", :from {:data \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}"}],"value":"[\"Predictions:\",#gorilla_repl.vega.VegaView{:content {:width 400, :height 247.2188, :padding {:top 10, :left 55, :bottom 40, :right 10}, :data [{:name \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\", :values ({:x 0.48191460119264695, :y 0} {:x 1.5017151977199725, :y 0.001} {:x 2.521515794247298, :y 0.0} {:x 3.5413163907746235, :y 0.003} {:x 4.561116987301949, :y 0.006} {:x 5.580917583829274, :y 0.017} {:x 6.6007181803565995, :y 0.094} {:x 7.620518776883925, :y 0.32} {:x 8.64031937341125, :y 0.407} {:x 9.660119969938576, :y 0.12} {:x 10.679920566465901, :y 0.028} {:x 11.699721162993226, :y 0.003} {:x 12.719521759520552, :y 0.001} {:x 13.739322356047877, :y 0})}], :marks [{:type \"line\", :from {:data \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\"}, :properties {:enter {:x {:scale \"x\", :field \"data.x\"}, :y {:scale \"y\", :field \"data.y\"}, :interpolate {:value \"step-before\"}, :fill {:value \"steelblue\"}, :fillOpacity {:value 0.4}, :stroke {:value \"steelblue\"}, :strokeWidth {:value 2}, :strokeOpacity {:value 1}}}}], :scales [{:name \"x\", :type \"linear\", :range \"width\", :zero false, :domain {:data \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\", :field \"data.x\"}} {:name \"y\", :type \"linear\", :range \"height\", :nice true, :zero false, :domain {:data \"e8fa6556-4e1a-4a47-a9d7-d42f6fe40831\", :field \"data.y\"}}], :axes [{:type \"x\", :scale \"x\"} {:type \"y\", :scale \"y\"}]}}]"}
;; <=

;; **
;;; Notice that this distribution appears significantly different from the Gaussian distribution that is produced by the least-squares approach. In particular, it appears to be "peakier" - more concentrated in the middle - but its tails appear to be significantly heavier. (In short, it has higher kurtosis.) This is because, in general, allowing for uncertainty on the part of noise levels @@\sigma@@ generates heavy-tailed predictive distributions - because we're allowing for unlikely but possible cases in which the noise level @@\sigma@@ is extremely high, and our dataset is actually not very informative.
;; **

;; @@

;; @@
